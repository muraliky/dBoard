function renderAutomationOpportunityMatrix() {
    const container = document.getElementById('priorityAreasList');
    if (!container) return;
    
    const data = getFilteredAutomationData();
    let groupedData = getGroupedAutomationData(data);
    
    if (groupedData.length === 0) {
        container.innerHTML = '<p style="text-align: center; color: #666;">No data available for selected filters.</p>';
        return;
    }
    
    let html = `
        <div style="background: white; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); overflow: hidden;">
            <!-- Table Controls -->
            <div style="padding: 20px; border-bottom: 1px solid #e0e0e0; background: #f8f9fa;">
                <div style="display: flex; justify-content: space-between; align-items: center; gap: 15px;">
                    <h4 style="margin: 0; color: #2c3e50;">Analysis</h4>
                    <div style="display: flex; gap: 10px;">
                        <select id="sortBy" onchange="sortAutomationTable(this.value)" style="padding: 6px 12px; border: 1px solid #ddd; border-radius: 4px;">
                            <option value="gap">Sort by Gap</option>
                            <option value="coverage">Sort by Coverage</option>
                            <option value="totalManual">Sort by Test Count</option>
                            <option value="saveInHours">Sort by Hours Saved</option>
                        </select>
                    </div>
                </div>
            </div>
            
            <!-- Table Content with Scrolling -->
            <div style="overflow-x: auto; max-height: 600px; overflow-y: auto;">
                <table id="automationOpportunityTable" style="width: 100%; border-collapse: collapse; min-width: 800px;">
                    <thead style="position: sticky; top: 0; background: #f1f3f4; z-index: 10;">
                        <tr>
                            <th style="text-align: left; padding: 12px; border-bottom: 2px solid #ddd; font-weight: 600; background: #f1f3f4;">Area/Application</th>
                            <th style="text-align: center; padding: 12px; border-bottom: 2px solid #ddd; font-weight: 600; background: #f1f3f4;">Coverage</th>
                            <th style="text-align: center; padding: 12px; border-bottom: 2px solid #ddd; font-weight: 600; background: #f1f3f4;">Gap to 90%</th>
                            <th style="text-align: center; padding: 12px; border-bottom: 2px solid #ddd; font-weight: 600; background: #f1f3f4;">Priority Tests</th>
                            <th style="text-align: center; padding: 12px; border-bottom: 2px solid #ddd; font-weight: 600; background: #f1f3f4;">Total Manual</th>
                            <th style="text-align: center; padding: 12px; border-bottom: 2px solid #ddd; font-weight: 600; background: #f1f3f4;">Hours Saved</th>
                            <th style="text-align: center; padding: 12px; border-bottom: 2px solid #ddd; font-weight: 600; background: #f1f3f4;">Status</th>
                        </tr>
                    </thead>
                    <tbody id="automationTableBody">
    `;
    
    // Sort data by gap (highest first)
    groupedData.sort((a, b) => b.gap - a.gap);
    
    groupedData.forEach((item, index) => {
        const statusColor = item.coverage >= 90 ? '#27ae60' : 
                           item.coverage >= 50 ? '#f39c12' : '#e74c3c';
        
        const statusText = item.coverage >= 90 ? 'Excellent' : 
                          item.coverage >= 50 ? 'Moderate' : 'Needs Focus';
        
        const rowBg = index % 2 === 0 ? '#ffffff' : '#f9f9f9';
        
        html += `
            <tr style="background: ${rowBg};" onmouseover="this.style.background='#f0f8ff'" onmouseout="this.style.background='${rowBg}'">
                <td style="padding: 12px; border-bottom: 1px solid #eee;">
                    <div style="font-weight: 600; color: #2c3e50;">${item.name}</div>
                    <div style="font-size: 12px; color: #666; margin-top: 2px;">${getContextInfo(item)}</div>
                </td>
                <td style="padding: 12px; border-bottom: 1px solid #eee; text-align: center;">
                    <div style="display: flex; align-items: center; justify-content: center; gap: 8px;">
                        <div style="width: 60px; height: 8px; background: #e0e0e0; border-radius: 4px; overflow: hidden;">
                            <div style="width: ${item.coverage}%; height: 100%; background: ${statusColor}; border-radius: 4px;"></div>
                        </div>
                        <span style="font-weight: 600; color: ${statusColor};">${item.coverage}%</span>
                    </div>
                </td>
                <td style="padding: 12px; border-bottom: 1px solid #eee; text-align: center;">
                    <span style="font-weight: 600; color: ${item.gap > 20 ? '#e74c3c' : item.gap > 10 ? '#f39c12' : '#27ae60'};">
                        ${item.gap}%
                    </span>
                </td>
                <td style="padding: 12px; border-bottom: 1px solid #eee; text-align: center; font-weight: 600;">
                    ${item.highPriorityTests.toLocaleString()}
                </td>
                <td style="padding: 12px; border-bottom: 1px solid #eee; text-align: center; font-weight: 600;">
                    ${item.totalManual.toLocaleString()}
                </td>
                <td style="padding: 12px; border-bottom: 1px solid #eee; text-align: center; font-weight: 600;">
                    ${item.saveInHours.toLocaleString()}
                </td>
                <td style="padding: 12px; border-bottom: 1px solid #eee; text-align: center;">
                    <span style="
                        padding: 4px 12px; 
                        border-radius: 12px; 
                        font-size: 12px; 
                        font-weight: 600; 
                        background: ${statusColor}20; 
                        color: ${statusColor};
                        border: 1px solid ${statusColor}40;
                    ">
                        ${statusText}
                    </span>
                </td>
            </tr>
        `;
    });
    
    html += `
                    </tbody>
                </table>
            </div>
            
            <!-- Summary Footer -->
            <div style="padding: 15px 20px; background: #f8f9fa; border-top: 1px solid #e0e0e0;">
                <div style="display: flex; justify-content: space-between; align-items: center; font-size: 14px; color: #666;">
                    <span>Total Items: ${groupedData.length}</span>
                    <span>Average Coverage: ${Math.round(groupedData.reduce((sum, d) => sum + d.coverage, 0) / groupedData.length)}%</span>
                    <span>Items Below Target: ${groupedData.filter(d => d.coverage < 90).length}</span>
                </div>
            </div>
        </div>
    `;
    
    container.innerHTML = html;
    
    // Store data for sorting
    window.currentAutomationData = groupedData;
}

// Sorting function for the table
function sortAutomationTable(sortBy) {
    const data = window.currentAutomationData;
    if (!data) return;
    
    // Sort the data
    data.sort((a, b) => {
        switch(sortBy) {
            case 'coverage':
                return b.coverage - a.coverage;
            case 'totalManual':
                return b.totalManual - a.totalManual;
            case 'saveInHours':
                return b.saveInHours - a.saveInHours;
            case 'gap':
            default:
                return b.gap - a.gap;
        }
    });
    
    // Re-render table body
    const tbody = document.getElementById('automationTableBody');
    if (!tbody) return;
    
    let html = '';
    data.forEach((item, index) => {
        const statusColor = item.coverage >= 90 ? '#27ae60' : 
                           item.coverage >= 50 ? '#f39c12' : '#e74c3c';
        
        const statusText = item.coverage >= 90 ? 'Excellent' : 
                          item.coverage >= 50 ? 'Moderate' : 'Needs Focus';
        
        const rowBg = index % 2 === 0 ? '#ffffff' : '#f9f9f9';
        
        html += `
            <tr style="background: ${rowBg};" onmouseover="this.style.background='#f0f8ff'" onmouseout="this.style.background='${rowBg}'">
                <td style="padding: 12px; border-bottom: 1px solid #eee;">
                    <div style="font-weight: 600; color: #2c3e50;">${item.name}</div>
                    <div style="font-size: 12px; color: #666; margin-top: 2px;">${getContextInfo(item)}</div>
                </td>
                <td style="padding: 12px; border-bottom: 1px solid #eee; text-align: center;">
                    <div style="display: flex; align-items: center; justify-content: center; gap: 8px;">
                        <div style="width: 60px; height: 8px; background: #e0e0e0; border-radius: 4px; overflow: hidden;">
                            <div style="width: ${item.coverage}%; height: 100%; background: ${statusColor}; border-radius: 4px;"></div>
                        </div>
                        <span style="font-weight: 600; color: ${statusColor};">${item.coverage}%</span>
                    </div>
                </td>
                <td style="padding: 12px; border-bottom: 1px solid #eee; text-align: center;">
                    <span style="font-weight: 600; color: ${item.gap > 20 ? '#e74c3c' : item.gap > 10 ? '#f39c12' : '#27ae60'};">
                        ${item.gap}%
                    </span>
                </td>
                <td style="padding: 12px; border-bottom: 1px solid #eee; text-align: center; font-weight: 600;">
                    ${item.highPriorityTests.toLocaleString()}
                </td>
                <td style="padding: 12px; border-bottom: 1px solid #eee; text-align: center; font-weight: 600;">
                    ${item.totalManual.toLocaleString()}
                </td>
                <td style="padding: 12px; border-bottom: 1px solid #eee; text-align: center; font-weight: 600;">
                    ${item.saveInHours.toLocaleString()}
                </td>
                <td style="padding: 12px; border-bottom: 1px solid #eee; text-align: center;">
                    <span style="
                        padding: 4px 12px; 
                        border-radius: 12px; 
                        font-size: 12px; 
                        font-weight: 600; 
                        background: ${statusColor}20; 
                        color: ${statusColor};
                        border: 1px solid ${statusColor}40;
                    ">
                        ${statusText}
                    </span>
                </td>
            </tr>
        `;
    });
    
    tbody.innerHTML = html;
}

// Helper function to get grouped data based on current filters
function getGroupedAutomationData(data) {
    if (filters.group && filters.subGroup) {
        return data
            .filter(d => d.area === filters.group && d.subArea === filters.subGroup)
            .map(d => ({
                name: d.applicationName,
                area: d.area,
                subArea: d.subArea,
                coverage: d.automationCoverage,
                gap: Math.max(0, 90 - d.automationCoverage),
                highPriorityTests: d.manualCritical + d.manualHigh,
                totalManual: d.totalManualCases,
                totalAutomated: d.totalAutomatedTillDate,
                readiness: d.regressionSuiteAvailable === 'Yes' ? 'Ready' : 'Not Ready',
                saveInHours: d.saveInHours
            }));
    } else if (filters.group) {
        const subAreas = [...new Set(data.filter(d => d.area === filters.group).map(d => d.subArea))];
        return subAreas.map(subArea => {
            const subAreaData = data.filter(d => d.area === filters.group && d.subArea === subArea);
            const totalManual = subAreaData.reduce((sum, d) => sum + d.totalManualCases, 0);
            const totalAutomated = subAreaData.reduce((sum, d) => sum + d.totalAutomatedTillDate, 0);
            const coverage = totalManual > 0 ? Math.round((totalAutomated / totalManual) * 100) : 0;
            
            return {
                name: subArea,
                area: filters.group,
                subArea: subArea,
                coverage,
                gap: Math.max(0, 90 - coverage),
                highPriorityTests: subAreaData.reduce((sum, d) => sum + d.manualCritical + d.manualHigh, 0),
                totalManual,
                totalAutomated,
                readiness: subAreaData.every(d => d.regressionSuiteAvailable === 'Yes') ? 'Ready' : 'Partial',
                saveInHours: subAreaData.reduce((sum, d) => sum + d.saveInHours, 0),
                applicationsCount: subAreaData.length
            };
        });
    } else {
        const areas = [...new Set(data.map(d => d.area))];
        return areas.map(area => {
            const areaData = data.filter(d => d.area === area);
            const totalManual = areaData.reduce((sum, d) => sum + d.totalManualCases, 0);
            const totalAutomated = areaData.reduce((sum, d) => sum + d.totalAutomatedTillDate, 0);
            const coverage = totalManual > 0 ? Math.round((totalAutomated / totalManual) * 100) : 0;
            
            return {
                name: area,
                area: area,
                subArea: '',
                coverage,
                gap: Math.max(0, 90 - coverage),
                highPriorityTests: areaData.reduce((sum, d) => sum + d.manualCritical + d.manualHigh, 0),
                totalManual,
                totalAutomated,
                readiness: areaData.every(d => d.regressionSuiteAvailable === 'Yes') ? 'Ready' : 'Partial',
                saveInHours: areaData.reduce((sum, d) => sum + d.saveInHours, 0),
                applicationsCount: areaData.length
            };
        });
    }
}

// Helper function to get context info for display
function getContextInfo(item) {
    if (filters.group && filters.subGroup) {
        return `Application in ${item.area} → ${item.subArea}`;
    } else if (filters.group) {
        return `Sub-area in ${item.area} (${item.applicationsCount || 1} apps)`;
    } else {
        return `Business Area (${item.applicationsCount || 1} apps)`;
    }
}
